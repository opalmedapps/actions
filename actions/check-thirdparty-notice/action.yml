# SPDX-FileCopyrightText: Copyright (C) 2025 Opal Health Informatics Group <https://www.opalmedapps.com>
#
# SPDX-License-Identifier: MIT

# Ensures that declared project dependencies and the third-party notice in THIRDPARTY.md are in sync.
# I.e., each dependency has to have a corresponding heading in the notice.
# Warns about dependencies missing as well as dependencies that are declared in addition.
#
# Note: Currently supports npm, composer and pip.

name: Check Thirdparty Notice
description: Ensures that declared project dependencies and the third-party notice in THIRDPARTY.md are in sync.

inputs:
  package-file:
    description: The filename of an npm package.json file (can be relative to the current working directory)
    default: ""
  composer-file:
    description: The filename of a composer.json file (can be relative to the current working directory)
    default: ""
  pyproject-file:
    description: The filename of a Python pyproject.toml file (can be relative to the current working directory).
    default: ""
  pip-requirements-files:
    description: |
      The filename(s) of a requirements file (can be relative to the current working directory).
      If specifying more than one file, separate with spaces.
    default: ""
  additional-dependencies:
    description: |
      Additional dependencies that are allowed to be listed in the third-party notice.
      If specifying more than one package, separate with spaces.
    default: ""

runs:
  using: "composite"
  steps:
    # Validate inputs
    - name: Make sure a dependencies file path was provided
      run: |
        if [[ -z "$PACKAGE_FILE" ]] \
        && [[ -z "$PYPROJECT_FILE" ]] \
        && [[ -z "$COMPOSER_FILE" ]] \
        && [[ -z "$PIP_REQUIREMENTS_FILES" ]]; then
          echo "At least one of the inputs package-file, composer-file, pyproject-file or pip-requirements-files must be provided";
          exit 1;
        fi
      env:
        PACKAGE_FILE: ${{ inputs.package-file }}
        COMPOSER_FILE: ${{ inputs.composer-file }}
        PYPROJECT_FILE: ${{ inputs.pyproject-file }}
        PIP_REQUIREMENTS_FILES: ${{ inputs.pip-requirements-files }}
      shell: bash

    # Setup
    # Copy check_thirdparty_notice.py from the action path to the current directory, so it can see all relevant files
    - name: Copy check_thirdparty_notice.py to the current directory
      run: cp "$GITHUB_ACTION_PATH/check_thirdparty_notice.py" .
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
    - name: Install uv
      uses: astral-sh/setup-uv@v7.1.1
      with:
        # The cache isn't needed in non-python environments without a relevant requirements or lock file, and causes an unnecessary warning
        enable-cache: false

    - name: Compose the arguments to the script
      id: script-arguments
      run: |
        ARGS=
        ARGS=${ARGS}${NPM:+ --npm $NPM}
        ARGS=${ARGS}${COMPOSER:+ --composer $COMPOSER}
        ARGS=${ARGS}${PYPROJECT:+ --pyproject $PYPROJECT}
        ARGS=${ARGS}${PIP_REQUIREMENTS:+ --pip $PIP_REQUIREMENTS}
        ARGS=${ARGS}${ADDITIONAL_DEPENDENCIES:+ --additional-dependencies $ADDITIONAL_DEPENDENCIES}
        echo "Arguments are: $ARGS"
        echo ARGS="$ARGS" >> "$GITHUB_OUTPUT"
      env:
        NPM: ${{ inputs.package-file }}
        COMPOSER: ${{ inputs.composer-file }}
        PYPROJECT: ${{ inputs.pyproject-file }}
        PIP_REQUIREMENTS: ${{ inputs.pip-requirements-files }}
        ADDITIONAL_DEPENDENCIES: ${{ inputs.additional-dependencies }}
      shell: bash

    # Run the thirdparty notice check
    - name: Call the check_thirdparty_notice script
      run: uv run check_thirdparty_notice.py $ARGS
      env:
        ARGS: ${{ steps.script-arguments.outputs.ARGS }}
      shell: bash
